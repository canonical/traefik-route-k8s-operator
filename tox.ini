# Copyright 2022 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = lint, static-{charm,lib}, unit

[vars]
src_path = {toxinidir}/src/
tst_path = {toxinidir}/tests/
lib_path = {toxinidir}/lib/charms/traefik_route_k8s
all_path = {[vars]src_path} {[vars]lib_path} {[vars]tst_path}

[testenv]
setenv =
  PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
  PYTHONBREAKPOINT=ipdb.set_trace
  PY_COLORS=1
passenv =
  PYTHONPATH
  CHARM_BUILD_DIR
  MODEL_SETTINGS

[testenv:fmt]
description = Apply coding style standards to code
deps =
    black
    ruff
    isort
commands =
    isort {[vars]all_path}
    black {[vars]all_path}
    ruff check {[vars]all_path} --fix

[testenv:lint]
description = Check code against coding style standards
deps =
    black
    ruff
    codespell
commands =
    # uncomment the following line if this charm owns a lib
    codespell {[vars]lib_path}
    codespell . --skip .git --skip .tox --skip build --skip lib --skip venv* \
      --skip .mypy_cache --skip icon.svg
    ruff check {[vars]all_path}
    black --check --diff {[vars]all_path}

[testenv:static-{charm,lib,unit,integration}]
description = Run static analysis checks
deps =
  pyright
  charm: -r{toxinidir}/requirements.txt
  lib: ops
  unit: {[testenv:unit]deps}
  integration: {[testenv:integration]deps}
  integration: pytest-operator==1.0.0b1
commands =
  charm: pyright {[vars]src_path} {posargs}
  lib: pyright --pythonversion 3.8 {[vars]lib_path} {posargs}
  lib: /usr/bin/env sh -c 'for m in $(git diff main --name-only {[vars]lib_path}); do if ! git diff main $m | grep -q "+LIBPATCH\|+LIBAPI"; then echo "You forgot to bump the version on $m!"; exit 1; fi; done'
  unit: pyright {[vars]tst_path}/unit {posargs}
  integration: pyright {[vars]tst_path}/integration {posargs} --exclude {[vars]tst_path}/integration/ingress-requirer-mock
allowlist_externals = /usr/bin/env

[testenv:unit]
description = Run unit tests
deps =
    pytest
    coverage[toml]
    -r{toxinidir}/requirements.txt
commands =
    coverage run --source={[vars]src_path} \
        -m pytest -v --tb native -s {[vars]tst_path}unit {posargs}
    coverage report

[testenv:scenario]
description = Run integration tests
deps =
    pytest
    jsonschema
    ops-scenario>=5.0,<7.0.0
    -r{toxinidir}/requirements.txt
commands =
    pytest -v --tb native --log-cli-level=INFO -s {[vars]tst_path}scenario {posargs}

[testenv:integration]
description = Run integration tests
deps =
    asyncstdlib
    pytest
    juju ~= 3.1.0
    pytest-operator
    -r{toxinidir}/requirements.txt
commands =
    pytest -v --tb native --log-cli-level=INFO -s {[vars]tst_path}integration {posargs}
